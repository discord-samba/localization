## Is this ignored? This should be ignored.
## This shouldn't [COUNT] as a string key.

## Begin test of a YAMDBF Lang file:

[RESOLVE_TYPE]
## Only translate the string return values here
aaaaaa
\## Also don't do anything with the default return
\{{!
	switch (args.type)
	{
		case 'Command': return 'command';
		case 'CommandGroup': return 'command group';
		case 'User': return 'user';
		case 'Member': return 'member';
		case 'BannedUser': return 'banned user';
		case 'Channel': return 'channel';
		case 'Role': return 'role';
		case 'String': return 'string';
		case 'Number': return 'number';
		case 'Duration': return 'duration';
		default: return args.type;
	}
!}}
foo \{{ bar }}
\[TEST_ESCAPED_KEY]

[CLEAN_ARG]
## Simple template script to truncate long input `args.arg`,
## and overcompensate for URL escaping with an abundance of
## zero-width spaces without having to fuss with URL parsing/regex
## because who wants to bother with that?
##
## Returns the modified value of `args.arg`
{{!
	let { arg } = args;
	if (arg.length > 50) arg = arg.slice(0, 47) + '...';
	return arg.split('').join('\u200b');
!}}

[RESOLVE_ERR_RESOLVE_BOOLEAN]
in arg `{{ name }}`: `{{! res.CLEAN_ARG() !}}` could not be resolved to a boolean.
Usage: `{{ usage }}`
Boolean examples: `true`, `on`, `yes`, `false`, `off`, `no`

[RESOLVE_ERR_RESOLVE_NUMBER]
in arg `{{ name }}`: `{{! res.CLEAN_ARG() !}}` could not be resolved to a number.
Usage: `{{ usage }}`

[RESOLVE_ERR_RESOLVE_DURATION]
in arg `{{ name }}`: `{{! res.CLEAN_ARG() !}}` could not be resolved to a duration.
Usage: `{{ usage }}`
Duration examples: `10m`, `2h`, `1.5d`

[RESOLVE_ERR_RESOLVE_TYPE_ID]
in arg `{{ name }}`: Failed to find a {{! res.RESOLVE_TYPE() !}} with ID `{{ arg }}`
Usage: `{{ usage }}`

[RESOLVE_ERR_RESOLVE_TYPE_TEXT]
in arg `{{ name }}`: Failed to find a {{! res.RESOLVE_TYPE() !}} containing the text `{{! res.CLEAN_ARG() !}}`
Usage: `{{ usage }}`

[RESOLVE_ERR_MULTIPLE_USER_RESULTS]
Found multiple potential matches for arg `{{ name }}`:
{{!
	const users = args.users.split(', ');
	if (users.length > 5)
	{
		const slice = users.slice(0, 5);
		return `${slice.join(', ')}, plus ${users.length - slice.length} more.`
	}
	else return users.join(', ');
!}}
Please refine your search or consider using an ID/mention
Usage: `{{ usage }}`

[RESOLVE_ERR_MULTIPLE_CHANNEL_RESULTS]
Found multiple potential matches for arg `{{ name }}`:
{{!
	const channels = args.channels.split(', ');
	if (channels.length > 5)
	{
		const slice = channels.slice(0, 5);
		return `${slice.join(', ')}, plus ${channels.length - slice.length} more.`
	}
	else return channels.join(', ');
!}}
Please refine your search or consider using an ID/channel link
Usage: `{{ usage }}`

[RESOLVE_ERR_MULTIPLE_ROLE_RESULTS]
Found multiple potential matches for arg `{{ name }}`:
{{!
	const roles = args.roles.split(', ');
	if (roles.length > 5)
	{
		const slice = roles.slice(0, 5);
		return `${slice.join(', ')}, plus ${roles.length - slice.length} more.`
	}
	else return roles.join(', ');
!}}
Please refine your search or consider using an ID/role mention
Usage: `{{ usage }}`