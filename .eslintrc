{
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"project": "tsconfig.json",
		"ecmaVersion": 11,
		"sourceType": "module",
		"ecmaFeatures": {
			"modules": true
		}
	},
	"plugins": [
		"@typescript-eslint/eslint-plugin"
	],
	"rules": {
		// Possible Errors ////////////////////////////////////////////////////////////////////////////////////////////
		"for-direction": "error",
		"getter-return": "error",
		"no-async-promise-executor": "error",
		"no-await-in-loop": "error",
		"no-compare-neg-zero": "error",
		"no-cond-assign": "error",
		"no-console": "warn",
		"no-constant-condition": [
			"error",
			{
				"checkLoops": false
			}
		],
		"no-debugger": "error",
		"no-dupe-args": "error",
		"no-dupe-keys": "error",
		"no-duplicate-case": "error",
		"no-empty-character-class": "warn",
		"no-ex-assign": "error",
		"no-extra-parens": "off",
		"@typescript-eslint/no-extra-parens": "warn",
		"no-extra-semi": "error",
		"no-func-assign": "error",
		"no-import-assign": "error",
		"no-inner-declarations": "error",
		"no-invalid-regexp": "error",
		"no-irregular-whitespace": "error",
		"no-misleading-character-class": "error",
		"no-obj-calls": "error",
		"no-regex-spaces": "warn",
		"no-template-curly-in-string": "error",
		"no-unexpected-multiline": "error",
		"no-unreachable": "error",
		"no-unsafe-finally": "error",
		"no-unsafe-negation": "error",
		"require-atomic-updates": "error",
		"use-isnan": "error",
		"valid-typeof": "error",

		// Best Practices /////////////////////////////////////////////////////////////////////////////////////////////
		"accessor-pairs": "error",
		"array-callback-return": "error",
		"block-scoped-var": "error",

		// "class-methods-use-this": "warn",

		"complexity": [
			"warn",
			20
		],
		"default-param-last": "error",
		"dot-location": [
			"error",
			"property"
		],
		"dot-notation": [
			"error",
			{
				"allowKeywords": false
			}
		],
		"eqeqeq": "error",
		"guard-for-in": "warn",
		"max-classes-per-file": [
			"error",
			1
		],
		"no-caller": "error",
		"no-div-regex": "warn",
		"no-else-return": "error",
		"no-empty-function": "off",
		"@typescript-eslint/no-empty-function": [
			"error",
			{
				"allow": [
					"arrowFunctions",
					"methods",
					"getters",
					"setters"
				]
			}
		],
		"no-empty-pattern": "error",
		"no-eq-null": "error",
		"no-eval": "error",
		"no-extend-native": "error",
		"no-extra-bind": "error",
		"no-extra-label": "error",
		"no-floating-decimal": "error",
		"no-global-assign": "error",
		"no-implicit-coercion": "error",
		"no-implicit-globals": "error",
		"no-implied-eval": "error",
		"no-invalid-this": "error",
		"no-iterator": "error",
		"no-lone-blocks": "error",
		"no-loop-func": "error",
		"no-multi-spaces": "error",
		"no-multi-str": "error",
		"no-new": "error",
		"no-new-func": "error",
		"no-new-wrappers": "error",
		"no-octal": "error",
		"no-octal-escape": "error",
		"no-param-reassign": "error",
		"no-proto": "error",
		"no-redeclare": "error",

		// Add later if necessary
		// "no-restricted-properties" [],

		"no-return-assign": "error",
		"no-return-await": "error",
		"no-script-url": "error",
		"no-self-assign": "error",
		"no-self-compare": "error",
		"no-sequences": "error",
		"no-throw-literal": "error",
		"no-unmodified-loop-condition": "error",
		"no-unused-expressions": "error",
		"no-unused-labels": "error",
		"no-useless-call": "error",
		"no-useless-catch": "error",
		"no-useless-concat": "warn",
		"no-useless-escape": "warn",
		"no-useless-return": "warn",
		"no-void": "error",
		"no-warning-comments": [
			"warn",
			{
				"terms": [
					"todo",
					"fixme"
				],
				"location": "anywhere"
			}
		],
		"no-with": "error",
		"prefer-promise-reject-errors": "warn",
		"prefer-regex-literals": "warn",
		"require-await": "off",
		"@typescript-eslint/require-await": "warn",
		"wrap-iife": [
			"error",
			"inside"
		],
		"yoda": [
			"error",
			"never"
		],

		// Variables //////////////////////////////////////////////////////////////////////////////////////////////////
		"no-delete-var": "error",
		"no-label-var": "error",

		// Add later if necessary
		// "no-restricted-globals": []

		"no-shadow": "error",
		"no-shadow-restricted-names": "error",

		// Disallows "Proxy", don't want to use /* global */ comments
		// "no-undef": "error",

		"no-undef-init": "error",
		"no-undefined": "error",
		"no-unused-vars": "off",
		"@typescript-eslint/no-unused-vars": [
			"error",
			{
				"vars": "all",
				"args": "all",
				"ignoreRestSiblings": false,
				"argsIgnorePattern": "^_"
			}
		],
		"no-use-before-define": "error",

		// Node.js and CommonJS ///////////////////////////////////////////////////////////////////////////////////////
		"no-path-concat": "error",
		"no-new-require": "error",

		// Stylistic Issues ///////////////////////////////////////////////////////////////////////////////////////////
		"array-bracket-newline": [
			"warn",
			"consistent"
		],
		"array-bracket-spacing": [
			"warn",
			"never"
		],
		"array-element-newline": [
			"warn",
			"consistent"
		],
		"block-spacing": [
			"error",
			"always"
		],
		"brace-style": "off",
		"@typescript-eslint/brace-style": [
			"error",
			"allman",
			{
				"allowSingleLine": true
			}
		],
		"camelcase": "off",
		"@typescript-eslint/camelcase": [
			"warn",
			{
				"properties": "always"
			}
		],
		"capitalized-comments": [
			"warn",
			"always",
			{
				"ignoreConsecutiveComments": true
			}
		],
		"comma-dangle": [
			"warn",
			"only-multiline"
		],
		"comma-spacing": [
			"warn",
			{
				"before": false,
				"after": true
			}
		],
		"comma-style": [
			"warn",
			"last"
		],
		"computed-property-spacing": [
			"warn",
			"never"
		],
		"eol-last": "warn",
		"func-call-spacing": "off",
		"@typescript-eslint/func-call-spacing": [
			"error",
			"never"
		],
		"func-names": [
			"error",
			"as-needed"
		],
		"func-style": [
			"error",
			"declaration",
			{
				"allowArrowFunctions": true
			}
		],
		"function-call-argument-newline": [
			"error",
			"consistent"
		],
		"function-paren-newline": [
			"error",
			"consistent"
		],

		// Add later if necessary?
		// "id-blacklist": ["error"],

		"indent": [
			"error",
			"tab",
			{
				"SwitchCase": 1
				// "ignoredNodes": [""]
			}
		],
		"key-spacing": "error",
		"keyword-spacing": "error",
		"line-comment-position": [
			"error",
			"above"
		],
		"lines-around-comment": [
			"warn",
			{
				"beforeLineComment": true,
				"allowBlockStart": true,
				"allowBlockEnd": true,
				"allowClassStart": true,
				"allowClassEnd": true,
				"allowObjectStart": true,
				"allowObjectEnd": true,
				// Exceptions for specific comments that should be covered by
				// allowBlockStart but aren't for some reason
				"ignorePattern": "Allow|Call"
			}
		],
		"lines-between-class-members": [
			"warn",
			"always",
			{
				"exceptAfterSingleLine": true
			}
		],
		"max-len": [
			"warn",
			120
		],
		"new-cap": [
			"error",
			{
				"capIsNew": false,
				"properties": false
			}
		],
		"new-parens": "error",
		"newline-per-chained-call": [
			"warn",
			{
				"ignoreChainWithDepth": 2
			}
		],
		"no-array-constructor": "error",
		"no-inline-comments": "warn",
		"no-lonely-if": "warn",
		"no-mixed-operators": "warn",
		"no-multiple-empty-lines": [
			"warn",
			{
				"max": 1
			}
		],
		"no-new-object": "error",
		"no-trailing-spaces": "warn",
		"no-unneeded-ternary": "warn",
		"no-whitespace-before-property": "error",
		"nonblock-statement-body-position": [
			"warn",
			"any",
			{
				"overrides": {
					"while": "below",
					"for": "below"
				}
			}
		],
		"object-curly-newline": [
			"warn",
			{
				"consistent": true
			}
		],
		"object-curly-spacing": [
			"warn",
			"always"
		],
		"object-property-newline": [
			"warn",
			{
				"allowAllPropertiesOnSameLine": true
			}
		],
		"one-var-declaration-per-line": [
			"warn",
			"always"
		],
		"operator-assignment": "warn",
		"operator-linebreak": [
			"error",
			"before",
			{
				"overrides": {
					"=": "after"
				}
			}
		],
		"padded-blocks": [
			"error",
			"never"
		],
		"prefer-object-spread": "warn",
		"quotes": "off",
		"@typescript-eslint/quotes": [
			"error",
			"single"
		],
		"semi": "off",
		"@typescript-eslint/semi": "error",
		"semi-spacing": [
			"warn",
			{
				"after": true
			}
		],
		"semi-style": [
			"error",
			"last"
		],
		"space-before-blocks": [
			"error",
			"always"
		],
		"space-before-function-paren": [
			"error",
			"never"
		],
		"space-in-parens": [
			"error",
			"never"
		],
		"space-infix-ops": "error",
		"space-unary-ops": "error",
		"spaced-comment": [
			"error",
			"always"
		],
		"switch-colon-spacing": [
			"error",
			{
				"after": true,
				"before": false
			}
		],
		"template-tag-spacing": [
			"error",
			"never"
		],
		"unicode-bom": [
			"error",
			"never"
		],

		// ECMAScript 6 ///////////////////////////////////////////////////////////////////////////////////////////////
		"arrow-body-style": [
			"warn",
			"as-needed"
		],
		"arrow-parens": [
			"warn",
			"as-needed"
		],
		"arrow-spacing": [
			"error",
			{
				"before": true,
				"after": true
			}
		],
		"constructor-super": "error",
		"generator-star-spacing": [
			"error",
			{
				"before": true,
				"after": false
			}
		],
		"no-class-assign": "error",
		"no-confusing-arrow": [
			"error",
			{
				"allowParens": true
			}
		],
		"no-const-assign": "error",

		// This interferes with method overloading in Typescript, sadly
		// "no-dupe-class-members": "error",

		"no-duplicate-imports": "error",
		"no-new-symbol": "error",
		"no-this-before-super": "error",
		"no-useless-computed-key": "warn",
		"no-useless-constructor": "off",
		"@typescript-eslint/no-useless-constructor": "error",
		"no-useless-rename": "error",
		"no-var": "error",
		"object-shorthand": [
			"error",
			"always"
		],
		"prefer-arrow-callback": "error",
		"prefer-const": "warn",
		"prefer-numeric-literals": "warn",
		"prefer-rest-params": "error",
		"prefer-spread": "warn",
		"prefer-template": "warn",
		"require-yield": "error",
		"rest-spread-spacing": [
			"error",
			"never"
		],
		"sort-imports": [
			"error",
			{
				"ignoreCase": false,
				"ignoreDeclarationSort": false,
				"ignoreMemberSort": true,
				"memberSyntaxSortOrder": [
					"none",
					"all",
					"multiple",
					"single"
				]
			}
		],
		"symbol-description": "warn",
		"template-curly-spacing": [
			"warn",
			"never"
		],
		"yield-star-spacing": [
			"error",
			"before"
		],

		// Typescript Specifics ///////////////////////////////////////////////////////////////////////////////////////
		"@typescript-eslint/adjacent-overload-signatures": "warn",
		"@typescript-eslint/array-type": [
			"error",
			{
				"default": "array",
				"readonly": "array"
			}
		],
		"@typescript-eslint/await-thenable": "warn",
		"@typescript-eslint/class-name-casing": [
			"error",
			{
				"allowUnderscorePrefix": true
			}
		],
		"@typescript-eslint/consistent-type-assertions": [
			"error",
			{
				"assertionStyle": "as",
				"objectLiteralTypeAssertions": "allow-as-parameter"
			}
		],
		"@typescript-eslint/consistent-type-definitions": [
			"error",
			"interface"
		],
		"@typescript-eslint/explicit-function-return-type": [
			"error",
			{
				"allowExpressions": true
			}
		],
		"@typescript-eslint/explicit-member-accessibility": "error",

		// Use if we want generic type parameters to conform to a specific pattern
		// "@typescript-eslint/generic-type-naming": ["warn", "^Pattern"],

		"@typescript-eslint/member-delimiter-style": [
			"error",
			{
				"multiline": {
					"delimiter": "semi",
					"requireLast": true
				},
				"singleline": {
					"delimiter": "comma",
					"requireLast": false
				}
			}
		],
		"@typescript-eslint/member-naming": [
			"error",
			{
				"private": "^_"
			}
		],
		"@typescript-eslint/no-array-constructor": "error",
		"@typescript-eslint/no-empty-interface": [
			"error",
			{
				"allowSingleExtends": false
			}
		],

		// "@typescript-eslint/no-explicit-any": "error",

		"@typescript-eslint/no-extraneous-class": [
			"error",
			{
				"allowConstructorOnly": false,
				"allowEmpty": false,
				"allowStaticOnly": true
			}
		],
		"@typescript-eslint/no-floating-promises": "error",
		"@typescript-eslint/no-for-in-array": "error",
		"@typescript-eslint/no-misused-new": "error",
		"@typescript-eslint/no-misused-promises": "error",
		"@typescript-eslint/no-namespace": [
			"error",
			{
				"allowDeclarations": true,
				"allowDefinitionFiles": true
			}
		],
		"@typescript-eslint/no-parameter-properties": "error",
		"@typescript-eslint/no-this-alias": [
			"error",
			{
				"allowDestructuring": true
			}
		],
		"@typescript-eslint/no-type-alias": [
			"error",
			{
				"allowAliases": "in-unions-and-intersections",
				"allowCallbacks": "always",
				"allowLiterals": "in-unions-and-intersections",
				"allowMappedTypes": "always",
				"allowTupleTypes": "always"
			}
		],
		"@typescript-eslint/no-unnecessary-qualifier": "warn",
		"@typescript-eslint/no-unnecessary-type-arguments": "warn",
		"@typescript-eslint/no-unnecessary-type-assertion": "warn",
		"@typescript-eslint/no-use-before-define": "error",
		"@typescript-eslint/prefer-for-of": "warn",
		"@typescript-eslint/prefer-function-type": "error",
		"@typescript-eslint/prefer-includes": "warn",

		// Currently causes an ESLint error.
		// "@typescript-eslint/prefer-readonly": "warn",

		// Doesn't understand global regex created by the RegExp constructor
		// "@typescript-eslint/prefer-regexp-exec": "warn"

		"@typescript-eslint/prefer-string-starts-ends-with": "warn",
		"@typescript-eslint/promise-function-async": [
			"error",
			{
				"allowedPromiseNames": [
					"Thenable"
				],
				"checkArrowFunctions": true,
				"checkFunctionDeclarations": true,
				"checkFunctionExpressions": true,
				"checkMethodDeclarations": true
			}
		],
		"@typescript-eslint/require-array-sort-compare": "error",
		"@typescript-eslint/restrict-plus-operands": "error",

		// This causes problems with optional chaining in TS 3.7 in that
		// it won't treat the expression as a boolean even if the final
		// chained item is an explicit boolean value at compile time
		// "@typescript-eslint/strict-boolean-expressions": [
		// 	"error",
		// 	{
		// 		"ignoreRhs": true
		// 	}
		// ],

		"@typescript-eslint/triple-slash-reference": [
			"error",
			{
				"path": "never",
				"types": "never",
				"lib": "never"
			}
		],
		"@typescript-eslint/type-annotation-spacing": "error",
		"@typescript-eslint/typedef": [
			"error",
			{
				"arrayDestructuring": false,
				"objectDestructuring": false,
				"arrowParameter": false,
				"variableDeclaration": true
			}
		],
		"@typescript-eslint/unbound-method": [
			"error",
			{
				"ignoreStatic": true
			}
		],
		"@typescript-eslint/unified-signatures": "warn"
	}
}